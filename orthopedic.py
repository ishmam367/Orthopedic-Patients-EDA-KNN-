# -*- coding: utf-8 -*-
"""orthopedic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1alCn68anz16V2VgKaX7S1hZfI8IdTbnR
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv('artho.csv')
data.head()

data.info()

data.describe()

#potting scatter matrix
color_list = ['red' if i=='Abnormal' else 'green' for i in data.loc[:,'class']]
pd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],
                                       c=color_list,
                                       figsize= [15,15],
                                       diagonal='hist',
                                       alpha=0.5,
                                       s = 200,
                                       marker = '.',
                                       edgecolor= "black")
plt.savefig('ScatterMatrix')
plt.show()

data_abnormal = data[data["class"]=="Abnormal"]
pd.plotting.scatter_matrix(data_abnormal.loc[:, data_abnormal.columns != "class"],
                                       c="red",
                                       figsize= [15,15],
                                       diagonal="hist",
                                       alpha=0.5,
                                       s = 200,
                                       marker = ".",
                                       edgecolor= "black")
plt.savefig('ScatterMatrixAbnormal')
plt.show()

data_abnormal = data[data["class"]=="Normal"]
pd.plotting.scatter_matrix(data_abnormal.loc[:, data_abnormal.columns != "class"],
                                       c="green",
                                       figsize= [15,15],
                                       diagonal="hist",
                                       alpha=0.5,
                                       s = 200,
                                       marker = ".",
                                       edgecolor= "black")
plt.savefig('ScatterMatrixNormal')
plt.show()

sns.countplot(x="class", data=data)
data.loc[:,'class'].value_counts()

#finding correlation
data.corr()

#sorting correlations with ascending sort

data.corr().unstack().sort_values().drop_duplicates()

#correlation map
f, ax = plt.subplots(figsize=(10,10))
sns.heatmap(data.corr(), annot=True, linewidth=".5", cmap="RdYlBu_r", fmt=".2f", ax = ax)
plt.title("Correlation Map",fontsize=20)
plt.savefig('CorrelationHeatMap')
plt.show()

from sklearn.preprocessing import LabelEncoder

x,y = data.loc[:,data.columns != 'class'], data.loc[:,'class']
encoder = LabelEncoder()
y1=encoder.fit_transform(y)

# train test split and using KNN
from sklearn.neighbors import KNeighborsClassifier

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)
knn = KNeighborsClassifier(n_neighbors = 4)
#x,y = data.loc[:,data.columns != 'class'], data.loc[:,'class']
knn.fit(x_train,y_train)
prediction = knn.predict(x_test)
#print('Prediction: {}'.format(prediction))
print(' When k=4 testing accuracy is: ',knn.score(x_test,y_test))

#model complexity or hyper parameter selection for k
neighbour = np.arange(1, 27)
train_accuracy = []
test_accuracy = []
# Looping over different values of k
for i, k in enumerate(neighbour):
    # k from 1 to 23(exclude)
    knn = KNeighborsClassifier(n_neighbors=k)
    # Fit with knn
    knn.fit(x_train,y_train)
    #train accuracy
    train_accuracy.append(knn.score(x_train, y_train))
    # test accuracy
    test_accuracy.append(knn.score(x_test, y_test))

# Plot
plt.figure(figsize=[13,8])
plt.plot(neighbour, test_accuracy, label = 'Testing Accuracy')
plt.plot(neighbour, train_accuracy, label = 'Training Accuracy')
plt.legend()
plt.title('value(k) VS Accuracy')
plt.xlabel('Number of Neighbours')
plt.ylabel('Accuracy')
plt.xticks(neighbour)
#plt.savefig('modelSelection.png')
plt.show()
print("Best accuracy is {} with K = {}".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))

#printing confusiom matrix and classification report
from sklearn.metrics import classification_report, confusion_matrix
cmat = confusion_matrix(y_test,prediction)
print('Confusion matrix: \n',cmat)
cr= classification_report(y_test,prediction)
print('Classification report: \n',cr)

#visualizing confusion matrix
sns.heatmap(cmat,annot=True,fmt="d") 
#plt.savefig('ConfusionMatrix')
plt.show()

#cross validation
from sklearn.model_selection import cross_val_score
reg = KNeighborsClassifier(10)
k = 10
cv_result = cross_val_score(reg,x,y,cv=k) 
print('CV Scores: ',cv_result)
print('CV scores average: ',np.sum(cv_result)/k)

